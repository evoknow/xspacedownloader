#!/usr/bin/env python3
# components/Translate.py
"""Translation component for XSpace Downloader using Google Translate."""

import os
import json
import logging
import requests
import random
import re
import urllib.parse
from typing import Dict, List, Optional, Union, Tuple

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Translate:
    """Class for handling translation of text between languages using Google Translate."""
    
    def __init__(self, api_url=None, api_key=None, config_file="mainconfig.json"):
        """
        Initialize the Translate component.
        
        Args:
            api_url (str, optional): Not used for Google Translate
            api_key (str, optional): Not required for our Google Translate implementation
            config_file (str, optional): Not used for Google Translate
        """
        # We're using a direct Google Translate approach that doesn't need API keys
        self.api_url = "https://translate.google.com/m"
        self.api_key = None  # Not needed for this implementation
        self.self_hosted = True  # Pretend we're self-hosted to avoid API key warnings
        
        # Initialize session for HTTP requests with proper headers
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
        })
        
        # Default language list - Google Translate supports many languages
        self.available_languages = [
            {"code": "en", "name": "English"},
            {"code": "es", "name": "Spanish"},
            {"code": "fr", "name": "French"},
            {"code": "de", "name": "German"},
            {"code": "it", "name": "Italian"},
            {"code": "pt", "name": "Portuguese"},
            {"code": "ru", "name": "Russian"},
            {"code": "zh", "name": "Chinese"},
            {"code": "ja", "name": "Japanese"},
            {"code": "ar", "name": "Arabic"},
            {"code": "bn", "name": "Bengali/Bangla"},
            {"code": "hi", "name": "Hindi"},
            {"code": "ko", "name": "Korean"},
            {"code": "nl", "name": "Dutch"},
            {"code": "sv", "name": "Swedish"},
            {"code": "tr", "name": "Turkish"},
            {"code": "vi", "name": "Vietnamese"},
            {"code": "pl", "name": "Polish"},
            {"code": "da", "name": "Danish"},
            {"code": "fi", "name": "Finnish"},
            {"code": "no", "name": "Norwegian"}
        ]
            
        logger.info("Translation component initialized using Google Translate")
        logger.info("No API key required - functioning with free Google Translate")
    
    def get_languages(self) -> List[Dict[str, str]]:
        """
        Get the list of available languages for translation.
        
        Returns:
            List[Dict[str, str]]: List of language dictionaries with code and name
        """
        return self.available_languages
    
    def translate(self, text: str, source_lang: str, target_lang: str) -> Tuple[bool, Union[str, Dict]]:
        """
        Translate text from source language to target language using Google Translate.
        
        Args:
            text (str): The text to translate
            source_lang (str): The source language code (e.g., 'en', 'es')
            target_lang (str): The target language code (e.g., 'en', 'es')
            
        Returns:
            Tuple[bool, Union[str, Dict]]: A tuple containing:
                - Success flag (True if successful, False otherwise)
                - Either the translated text (if successful) or an error dictionary
        """
        if not text:
            return False, {"error": "No text provided for translation"}
            
        if source_lang == target_lang:
            return True, text  # No translation needed
            
        try:
            # Handle 'auto' source language
            if source_lang == 'auto':
                source_lang = 'auto'
            
            # Prepare parameters for Google Translate
            params = {
                'sl': source_lang,
                'tl': target_lang,
                'q': text
            }
            
            # Make the request to Google Translate mobile site
            logger.info(f"Sending translation request to Google Translate")
            response = self.session.get(self.api_url, params=params, timeout=30)
            
            # Check response
            if response.status_code != 200:
                logger.error(f"Translation API error: {response.status_code}")
                return False, {
                    "error": f"Translation API error: {response.status_code}",
                    "details": "Failed to connect to Google Translate"
                }
            
            # Extract the translation result from the HTML response
            # Google Translate mobile returns HTML which we need to parse
            content = response.text
            
            # Look for the translation in the response
            # This is a simplified approach - in production, use proper HTML parsing
            result_div = re.search(r'class="result-container">(.*?)</div>', content)
            
            if result_div:
                # Get the translated text
                translated_text = result_div.group(1)
                
                # Clean up HTML entities
                translated_text = translated_text.replace('&amp;', '&')
                translated_text = translated_text.replace('&quot;', '"')
                translated_text = translated_text.replace('&#39;', "'")
                translated_text = translated_text.replace('&lt;', '<')
                translated_text = translated_text.replace('&gt;', '>')
                
                logger.info(f"Successfully translated text from {source_lang} to {target_lang}")
                return True, translated_text
            else:
                logger.error("Could not find translation in response")
                return False, {
                    "error": "Could not extract translation from response",
                    "details": "The translation service response format may have changed"
                }
                
        except requests.RequestException as e:
            logger.error(f"Request error in translation: {e}")
            return False, {"error": f"Network error: {str(e)}"}
        except Exception as e:
            logger.error(f"Unexpected error in translation: {e}")
            return False, {"error": f"Unexpected error: {str(e)}"}
            
    def detect_language(self, text: str) -> Tuple[bool, Union[str, Dict]]:
        """
        Detect the language of the provided text.
        
        Args:
            text (str): The text to analyze
            
        Returns:
            Tuple[bool, Union[str, Dict]]: A tuple containing:
                - Success flag (True if successful, False otherwise)
                - Either the detected language code (if successful) or an error dictionary
        """
        if not text:
            return False, {"error": "No text provided for language detection"}
        
        try:
            # For Google Translate, we'll just use the simplified detection
            # since the API doesn't provide a direct way to detect language only
            
            # Count non-ASCII characters
            non_ascii_count = sum(1 for c in text if ord(c) > 127)
            non_ascii_ratio = non_ascii_count / len(text) if len(text) > 0 else 0
            
            # Check for specific scripts
            has_cyrillic = any(0x0400 <= ord(c) <= 0x04FF for c in text)
            has_arabic = any(0x0600 <= ord(c) <= 0x06FF for c in text)
            has_devanagari = any(0x0900 <= ord(c) <= 0x097F for c in text)
            has_bengali = any(0x0980 <= ord(c) <= 0x09FF for c in text)
            has_cjk = any((0x4E00 <= ord(c) <= 0x9FFF or  # CJK Unified
                          0x3040 <= ord(c) <= 0x30FF or   # Japanese
                          0xAC00 <= ord(c) <= 0xD7A3)     # Korean
                         for c in text)
            
            # Determine language based on script
            if has_cyrillic:
                detected_lang = "ru"  # Russian (simplified)
            elif has_arabic:
                detected_lang = "ar"  # Arabic
            elif has_devanagari:
                detected_lang = "hi"  # Hindi
            elif has_bengali:
                detected_lang = "bn"  # Bengali
            elif has_cjk:
                # Very crude - in reality we'd need more sophisticated detection
                if any(0x3040 <= ord(c) <= 0x30FF for c in text):
                    detected_lang = "ja"  # Japanese
                elif any(0xAC00 <= ord(c) <= 0xD7A3 for c in text):
                    detected_lang = "ko"  # Korean
                else:
                    detected_lang = "zh"  # Chinese
            else:
                # For Latin scripts, just default to English or tell Google to auto-detect
                detected_lang = "auto"

            logger.info(f"Basic language detection: {detected_lang}")
            return True, detected_lang
                
        except Exception as e:
            logger.error(f"Error in basic language detection: {e}")
            return False, {"error": f"Language detection error: {str(e)}"}


if __name__ == "__main__":
    # Example usage
    translator = Translate()
    
    # Test translation
    print("Testing translation:")
    text = "Hello, how are you today?"
    success, result = translator.translate(text, "en", "es")
    
    if success:
        print(f"Original: {text}")
        print(f"Translation: {result}")
    else:
        print(f"Error: {result}")
        
    # Test language detection
    print("\nTesting language detection:")
    texts = [
        "Hello, world!",
        "¡Hola mundo!",
        "Bonjour le monde!",
        "こんにちは世界",
        "नमस्ते दुनिया",
        "বিশ্ব নমস্কার"
    ]
    
    for test_text in texts:
        success, lang = translator.detect_language(test_text)
        if success:
            print(f"Text: {test_text} => Detected: {lang}")
        else:
            print(f"Error: {lang}")