-- MySQL Schema for XSpace Downloader

-- Email Configuration Table
CREATE TABLE IF NOT EXISTS email_config (
    id INT PRIMARY KEY AUTO_INCREMENT,
    provider VARCHAR(50) NOT NULL COMMENT 'Provider type (sendgrid, mailgun, default-smtp)',
    api_key VARCHAR(255) COMMENT 'API key for the email service provider',
    from_email VARCHAR(100) COMMENT 'From email address',
    from_name VARCHAR(100) COMMENT 'From name to display',
    server VARCHAR(100) COMMENT 'SMTP server address',
    port INT COMMENT 'SMTP server port',
    username VARCHAR(100) COMMENT 'SMTP username',
    password VARCHAR(255) COMMENT 'SMTP password',
    use_tls BOOLEAN DEFAULT TRUE COMMENT 'Whether to use TLS for SMTP',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Users Table
CREATE TABLE IF NOT EXISTS users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    visitor_id VARCHAR(64) DEFAULT NULL,
    is_admin BOOLEAN DEFAULT FALSE
);

-- Spaces Table
CREATE TABLE IF NOT EXISTS spaces (
    id INT PRIMARY KEY AUTO_INCREMENT,
    space_id VARCHAR(50) UNIQUE NOT NULL,
    title VARCHAR(255),
    status ENUM('pending', 'downloading', 'downloaded', 'failed') DEFAULT 'pending',
    download_progress INT DEFAULT 0,
    file_path VARCHAR(255),
    file_size BIGINT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    user_id INT DEFAULT 0,
    visitor_id VARCHAR(64),
    notes TEXT,
    download_started_at TIMESTAMP NULL,
    download_completed_at TIMESTAMP NULL,
    INDEX (space_id),
    INDEX (user_id),
    INDEX (visitor_id),
    INDEX (status)
);

-- Tags Table
CREATE TABLE IF NOT EXISTS tags (
    tag_id INT PRIMARY KEY AUTO_INCREMENT,
    tag_name VARCHAR(50) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX (tag_name)
);

-- Space Tags Junction Table
CREATE TABLE IF NOT EXISTS space_tags (
    space_id VARCHAR(50),
    tag_id INT,
    user_id INT DEFAULT 0,
    visitor_id VARCHAR(64),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (space_id, tag_id, COALESCE(user_id, 0), COALESCE(visitor_id, '')),
    INDEX (space_id),
    INDEX (tag_id),
    INDEX (user_id),
    INDEX (visitor_id)
);

-- Speakers Table
CREATE TABLE IF NOT EXISTS speakers (
    speaker_id INT PRIMARY KEY AUTO_INCREMENT,
    handle VARCHAR(50) UNIQUE NOT NULL,
    display_name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX (handle)
);

-- Space Speakers Junction Table
CREATE TABLE IF NOT EXISTS space_speakers (
    space_id VARCHAR(50),
    speaker_id INT,
    is_host BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (space_id, speaker_id),
    INDEX (space_id),
    INDEX (speaker_id)
);

-- Download Queue Table
CREATE TABLE IF NOT EXISTS download_queue (
    id INT PRIMARY KEY AUTO_INCREMENT,
    space_id VARCHAR(50) UNIQUE NOT NULL,
    priority INT DEFAULT 0,
    attempts INT DEFAULT 0,
    last_attempt_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX (priority),
    INDEX (attempts),
    INDEX (last_attempt_at)
);

-- Add foreign key constraints
ALTER TABLE spaces
ADD CONSTRAINT fk_spaces_users
FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE space_tags
ADD CONSTRAINT fk_space_tags_spaces
FOREIGN KEY (space_id) REFERENCES spaces(space_id) ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT fk_space_tags_tags
FOREIGN KEY (tag_id) REFERENCES tags(tag_id) ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT fk_space_tags_users
FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE space_speakers
ADD CONSTRAINT fk_space_speakers_spaces
FOREIGN KEY (space_id) REFERENCES spaces(space_id) ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT fk_space_speakers_speakers
FOREIGN KEY (speaker_id) REFERENCES speakers(speaker_id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE download_queue
ADD CONSTRAINT fk_download_queue_spaces
FOREIGN KEY (space_id) REFERENCES spaces(space_id) ON DELETE CASCADE ON UPDATE CASCADE;
EOL < /dev/null