#!/bin/bash
# dump_sql_schema.sh - Extract MySQL database schema
#
# This script extracts the database schema from the XSpace Downloader MySQL database
# and saves it to mysql.schema file. This can be used to recreate the database
# structure in a new environment.

set -e  # Exit on error

# Text colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
RESET='\033[0m'

echo -e "${BLUE}XSpace Downloader - Database Schema Extraction${RESET}"
echo -e "This script will extract the database schema and save it to mysql.schema"
echo

# Get database credentials from db_config.json
if [ ! -f "db_config.json" ]; then
    echo -e "${RED}Error: db_config.json file not found${RESET}"
    exit 1
fi

# Extract credentials using jq if available, or python as fallback
if command -v jq &> /dev/null; then
    echo -e "${GREEN}Using jq to parse config file${RESET}"
    DB_HOST=$(jq -r '.mysql.host' db_config.json)
    DB_PORT=$(jq -r '.mysql.port' db_config.json)
    DB_NAME=$(jq -r '.mysql.database' db_config.json)
    DB_USER=$(jq -r '.mysql.user' db_config.json)
    DB_PASS=$(jq -r '.mysql.password' db_config.json)
else
    echo -e "${YELLOW}jq not found, using Python to parse config file${RESET}"
    DB_HOST=$(python -c "import json; print(json.load(open('db_config.json'))['mysql']['host'])")
    DB_PORT=$(python -c "import json; print(json.load(open('db_config.json'))['mysql']['port'])")
    DB_NAME=$(python -c "import json; print(json.load(open('db_config.json'))['mysql']['database'])")
    DB_USER=$(python -c "import json; print(json.load(open('db_config.json'))['mysql']['user'])")
    DB_PASS=$(python -c "import json; print(json.load(open('db_config.json'))['mysql']['password'])")
fi

# Check if mysqldump is available
if ! command -v mysqldump &> /dev/null; then
    echo -e "${RED}Error: mysqldump command not found${RESET}"
    echo -e "Please install MySQL client tools:"
    echo -e "  - On macOS: brew install mysql-client"
    echo -e "  - On Ubuntu: sudo apt-get install mysql-client"
    exit 1
fi

echo -e "${BLUE}Database Configuration:${RESET}"
echo -e "  Host:     ${DB_HOST}"
echo -e "  Port:     ${DB_PORT}"
echo -e "  Database: ${DB_NAME}"
echo -e "  User:     ${DB_USER}"
echo

# Create a temporary password file for mysqldump
PASSFILE=$(mktemp)
echo "[client]
password=\"${DB_PASS}\"
" > "${PASSFILE}"
chmod 600 "${PASSFILE}"

echo -e "${BLUE}Dumping database schema...${RESET}"

# Dump database schema (no data)
echo -e "${YELLOW}Note: Some non-critical warnings about permissions might appear below${RESET}"

mysqldump --defaults-extra-file="${PASSFILE}" \
    --host="${DB_HOST}" \
    --port="${DB_PORT}" \
    --user="${DB_USER}" \
    --no-data \
    --skip-comments \
    --routines \
    --skip-triggers \
    --skip-opt \
    --create-options \
    --skip-tablespaces \
    --force \
    "${DB_NAME}" > mysql.schema.tmp 2>/dev/null || {
        ERROR_CODE=$?
        if [ $ERROR_CODE -ne 0 ]; then
            echo -e "${YELLOW}Warning: mysqldump exited with code $ERROR_CODE${RESET}"
            echo -e "${YELLOW}Attempting simplified schema extraction...${RESET}"
            
            # Try a more basic approach if regular mysqldump fails
            mysqldump --defaults-extra-file="${PASSFILE}" \
                --host="${DB_HOST}" \
                --port="${DB_PORT}" \
                --user="${DB_USER}" \
                --no-data \
                --skip-add-locks \
                --skip-comments \
                --skip-set-charset \
                --skip-tablespaces \
                --force \
                "${DB_NAME}" > mysql.schema.tmp 2>/dev/null
            
            SECOND_ATTEMPT=$?
            echo "Simplified mysqldump exit code: $SECOND_ATTEMPT"
                
            # If that still fails, try using mysql to extract schema
            if [ $SECOND_ATTEMPT -ne 0 ]; then
                echo -e "${YELLOW}Warning: Both mysqldump attempts failed, trying direct SQL schema extraction...${RESET}"
                
                # Create the schema file header
                cat > mysql.schema.tmp << EOF
-- Schema for ${DB_NAME} database
-- Generated by direct extraction on $(date)

CREATE DATABASE IF NOT EXISTS \`${DB_NAME}\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE \`${DB_NAME}\`;

EOF
                
                # Test database connection first
                echo -e "${BLUE}Testing database connection...${RESET}"
                mysql --defaults-extra-file="${PASSFILE}" \
                    --host="${DB_HOST}" \
                    --port="${DB_PORT}" \
                    --user="${DB_USER}" \
                    -e "SELECT 1" > /dev/null 2>&1
                    
                if [ $? -ne 0 ]; then
                    echo -e "${RED}Error: Could not connect to database${RESET}"
                    echo -e "${RED}Please check your credentials and network connectivity${RESET}"
                    exit 1
                else
                    echo -e "${GREEN}Database connection successful${RESET}"
                fi
                
                # Get all tables
                TABLES=$(mysql --defaults-extra-file="${PASSFILE}" \
                    --host="${DB_HOST}" \
                    --port="${DB_PORT}" \
                    --user="${DB_USER}" \
                    --silent \
                    --skip-column-names \
                    -e "SHOW TABLES FROM \`${DB_NAME}\`" 2>/dev/null)
                
                # Check if we got tables
                if [ -z "$TABLES" ]; then
                    echo -e "${RED}Error: Could not get tables from database${RESET}"
                    echo -e "${YELLOW}Trying basic DESCRIBE method...${RESET}"
                    
                    # Try to get tables using a different approach
                    # This might work with more restricted permissions
                    mysql --defaults-extra-file="${PASSFILE}" \
                        --host="${DB_HOST}" \
                        --port="${DB_PORT}" \
                        --user="${DB_USER}" \
                        -e "USE \`${DB_NAME}\`; SELECT table_name FROM information_schema.tables WHERE table_schema = '${DB_NAME}'" | \
                        grep -v 'table_name' > tables.txt
                    
                    if [ -s tables.txt ]; then
                        TABLES=$(cat tables.txt)
                        echo -e "${GREEN}Found tables using information_schema: $TABLES${RESET}"
                        
                        # For each table, get column definitions
                        for TABLE in $TABLES; do
                            echo -e "-- Table structure for table \`$TABLE\`" >> mysql.schema.tmp
                            echo -e "CREATE TABLE IF NOT EXISTS \`$TABLE\` (" >> mysql.schema.tmp
                            
                            # Get column definitions
                            mysql --defaults-extra-file="${PASSFILE}" \
                                --host="${DB_HOST}" \
                                --port="${DB_PORT}" \
                                --user="${DB_USER}" \
                                -e "USE \`${DB_NAME}\`; DESCRIBE \`$TABLE\`" | \
                                tail -n +2 | \
                                awk '{printf "  \\`%s\\` %s %s %s %s,\n", $1, $2, ($3=="YES"?"NULL":"NOT NULL"), ($4=="PRI"?"PRIMARY KEY":"")}' \
                                >> mysql.schema.tmp
                            
                            # Close the table definition
                            # Remove the last comma and replace with a closing parenthesis
                            sed -i'.bak' '$ s/,$//' mysql.schema.tmp
                            echo -e ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n" >> mysql.schema.tmp
                        done
                        
                        rm -f tables.txt
                        rm -f mysql.schema.tmp.bak
                    else
                        echo -e "${RED}Error: Could not get tables using alternative method${RESET}"
                        echo -e "${YELLOW}Trying Python method as last resort...${RESET}"
                        rm -f tables.txt
                    fi
                else
                    echo -e "${GREEN}Found tables: $TABLES${RESET}"
                
                # For each table, get CREATE TABLE statement
                for TABLE in $TABLES; do
                    echo -e "-- Table structure for table \`$TABLE\`" >> mysql.schema.tmp
                    mysql --defaults-extra-file="${PASSFILE}" \
                        --host="${DB_HOST}" \
                        --port="${DB_PORT}" \
                        --user="${DB_USER}" \
                        --silent \
                        --skip-column-names \
                        -e "SHOW CREATE TABLE \`${DB_NAME}\`.\`$TABLE\`" 2>/dev/null | \
                        awk '{print $2}' >> mysql.schema.tmp
                    echo "" >> mysql.schema.tmp
                done
                fi
            fi
        fi
    }

# Add header information to the schema file
cat > mysql.schema << EOF
-- MySQL Schema for XSpace Downloader
-- Generated on $(date)
-- This file contains the database schema only (no data)
-- Run this script to create the database structure:
--   mysql -u your_username -p < mysql.schema

-- Create the database if it doesn't exist
CREATE DATABASE IF NOT EXISTS \`${DB_NAME}\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE \`${DB_NAME}\`;

EOF

# Append the schema dump to the file
cat mysql.schema.tmp >> mysql.schema

# Add instructions for creating default admin user
cat >> mysql.schema << EOF

-- Add default admin user if it doesn't exist
INSERT INTO \`users\` (\`email\`, \`password\`, \`status\`)
SELECT 'admin@xspacedownload.com', '\$2b\$10\$VGm5DFCi/zXlCH7qeP5m0.WGM/WHxfHEA8lBZ1DC3HqZUi0L.oEUG', 'active'
WHERE NOT EXISTS (SELECT 1 FROM \`users\` WHERE \`email\` = 'admin@xspacedownload.com');

-- Insert a default admin API key
INSERT INTO \`api_keys\` (\`user_id\`, \`key\`, \`name\`, \`permissions\`, \`created_at\`, \`expires_at\`, \`is_active\`)
SELECT 
    (SELECT \`id\` FROM \`users\` WHERE \`email\` = 'admin@xspacedownload.com' LIMIT 1),
    'DEV_API_KEY_DO_NOT_USE_IN_PRODUCTION',
    'Default Admin API Key',
    JSON_ARRAY(
        'view_users', 'manage_users',
        'view_spaces', 'create_spaces', 'edit_spaces', 'delete_spaces', 'view_all_spaces', 'edit_all_spaces', 'delete_all_spaces',
        'download_spaces', 'download_all_spaces', 'view_downloads', 'manage_downloads', 'view_all_downloads', 'manage_all_downloads',
        'view_tags', 'manage_tags',
        'manage_api_keys',
        'view_stats'
    ),
    NOW(),
    DATE_ADD(NOW(), INTERVAL 1 YEAR),
    1
WHERE EXISTS (SELECT 1 FROM \`users\` WHERE \`email\` = 'admin@xspacedownload.com') 
AND NOT EXISTS (SELECT 1 FROM \`api_keys\` WHERE \`name\` = 'Default Admin API Key');
EOF

# Clean up
rm "${PASSFILE}" mysql.schema.tmp

# Check the file size to make sure we got something
FILESIZE=$(wc -c < mysql.schema)
echo -e "${BLUE}Schema file size: ${FILESIZE} bytes${RESET}"
if [ "$FILESIZE" -lt 100 ]; then
    echo -e "${YELLOW}Warning: Schema dump is too small or empty (${FILESIZE} bytes)${RESET}"
    echo -e "${YELLOW}Trying Python-based schema extraction as last resort...${RESET}"
    
    # Create a Python script to extract schema via SQL queries
    cat > extract_schema.py << EOF
import sys
import os
import json
import mysql.connector
from mysql.connector import Error

def get_schema():
    try:
        # Read database configuration
        with open('db_config.json', 'r') as f:
            db_config = json.load(f)['mysql']
        
        # Connect to the database
        connection = mysql.connector.connect(
            host=db_config['host'],
            port=db_config['port'],
            database=db_config['database'],
            user=db_config['user'],
            password=db_config['password']
        )
        
        if connection.is_connected():
            cursor = connection.cursor(dictionary=True)
            
            # Get database information
            cursor.execute('SELECT DATABASE() as database_name')
            db_info = cursor.fetchone()
            database_name = db_info['database_name']
            
            # Get a list of tables
            cursor.execute('SHOW TABLES')
            tables = [list(table.values())[0] for table in cursor.fetchall()]
            
            schema = []
            schema.append(f'-- Schema for {database_name} database')
            schema.append('-- Generated with Python fallback extractor')
            schema.append('')
            schema.append('-- Create the database if it does not exist')
            schema.append(f'CREATE DATABASE IF NOT EXISTS \`{database_name}\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;')
            schema.append(f'USE \`{database_name}\`;')
            schema.append('')
            
            # For each table, extract columns
            for table in tables:
                schema.append(f'-- Table structure for table \`{table}\`')
                schema.append(f'CREATE TABLE IF NOT EXISTS \`{table}\` (')
                
                # Get columns
                cursor.execute(f'DESCRIBE \`{table}\`')
                columns = cursor.fetchall()
                
                col_def = []
                for column in columns:
                    null_str = 'NULL' if column['Null'] == 'YES' else 'NOT NULL'
                    default_str = f"DEFAULT '{column['Default']}'" if column['Default'] is not None else ''
                    extra_str = column['Extra'] if column['Extra'] else ''
                    col_def.append(f"  \`{column['Field']}\` {column['Type']} {null_str} {default_str} {extra_str}".strip())
                
                # Get primary key
                cursor.execute(f"SHOW KEYS FROM \`{table}\` WHERE Key_name = 'PRIMARY'")
                primary_keys = cursor.fetchall()
                if primary_keys:
                    pkeys = [f"\`{pk['Column_name']}\`" for pk in primary_keys]
                    col_def.append(f"  PRIMARY KEY ({', '.join(pkeys)})")
                
                schema.append(',\n'.join(col_def))
                schema.append(') ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;')
                schema.append('')
                
            cursor.close()
            connection.close()
            
            return '\n'.join(schema)
            
    except Error as e:
        print(f'Error: {e}', file=sys.stderr)
        return None
    except Exception as e:
        print(f'Unexpected error: {e}', file=sys.stderr)
        return None
    
schema = get_schema()
if schema:
    print(schema)
EOF
    
    # Run the Python script
    python3 extract_schema.py > mysql.schema.tmp
    if [ $? -eq 0 ]; then
        # Replace the existing schema file with our Python output
        cat mysql.schema.tmp > mysql.schema
        rm extract_schema.py  # Clean up
        echo -e "${GREEN}Successfully created schema using Python fallback method${RESET}"
    else
        echo -e "${RED}Error: All schema extraction methods failed${RESET}"
        echo -e "${RED}Please ensure you have proper database access permissions${RESET}"
        rm extract_schema.py  # Clean up
        exit 1
    fi
fi

if grep -q "Generated by direct extraction" mysql.schema; then
    echo -e "${GREEN}Successfully created schema file: mysql.schema (${FILESIZE} bytes) using direct SQL extraction${RESET}"
elif grep -q "Generated with Python fallback extractor" mysql.schema; then
    echo -e "${GREEN}Successfully created schema file: mysql.schema (${FILESIZE} bytes) using Python fallback method${RESET}"
else
    echo -e "${GREEN}Successfully created schema file: mysql.schema (${FILESIZE} bytes) using mysqldump${RESET}"
fi
echo -e "${BLUE}Use this file to recreate the database structure:${RESET}"
echo -e "  mysql -u your_username -p < mysql.schema"